//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Jogador"",
            ""id"": ""3689b8d4-5f11-4fc0-b277-4cff97dcea88"",
            ""actions"": [
                {
                    ""name"": ""Movement_W_S"",
                    ""type"": ""Value"",
                    ""id"": ""72e307c6-520c-4e34-aa37-c9f50ed312cb"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement_A_D"",
                    ""type"": ""Value"",
                    ""id"": ""856ac79a-c8db-48c9-bee9-adb1df0de448"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""W/S"",
                    ""id"": ""34a38a9d-f5ed-417c-9589-78917f3b1388"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_W_S"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4a4c43cd-41b9-4baa-b2d5-635247a1180c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_W_S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4d6aa5cf-847a-4f93-9f10-44b97fe3737f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_W_S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3199f8e4-edf7-4e0f-a34b-22bc501b07fc"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_W_S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Teclado"",
                    ""id"": ""1ced8576-b268-48f2-a95e-6e90fba2bf8a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_A_D"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6f10d7f8-4a91-4cc9-96e5-63a85612769c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_A_D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""590c7a5b-3f1c-4580-b445-19878994fbe4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_A_D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""370f543c-fad8-45fe-91fa-f03446e359f4"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement_A_D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Jogador
        m_Jogador = asset.FindActionMap("Jogador", throwIfNotFound: true);
        m_Jogador_Movement_W_S = m_Jogador.FindAction("Movement_W_S", throwIfNotFound: true);
        m_Jogador_Movement_A_D = m_Jogador.FindAction("Movement_A_D", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Jogador
    private readonly InputActionMap m_Jogador;
    private List<IJogadorActions> m_JogadorActionsCallbackInterfaces = new List<IJogadorActions>();
    private readonly InputAction m_Jogador_Movement_W_S;
    private readonly InputAction m_Jogador_Movement_A_D;
    public struct JogadorActions
    {
        private @PlayerControls m_Wrapper;
        public JogadorActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement_W_S => m_Wrapper.m_Jogador_Movement_W_S;
        public InputAction @Movement_A_D => m_Wrapper.m_Jogador_Movement_A_D;
        public InputActionMap Get() { return m_Wrapper.m_Jogador; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JogadorActions set) { return set.Get(); }
        public void AddCallbacks(IJogadorActions instance)
        {
            if (instance == null || m_Wrapper.m_JogadorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JogadorActionsCallbackInterfaces.Add(instance);
            @Movement_W_S.started += instance.OnMovement_W_S;
            @Movement_W_S.performed += instance.OnMovement_W_S;
            @Movement_W_S.canceled += instance.OnMovement_W_S;
            @Movement_A_D.started += instance.OnMovement_A_D;
            @Movement_A_D.performed += instance.OnMovement_A_D;
            @Movement_A_D.canceled += instance.OnMovement_A_D;
        }

        private void UnregisterCallbacks(IJogadorActions instance)
        {
            @Movement_W_S.started -= instance.OnMovement_W_S;
            @Movement_W_S.performed -= instance.OnMovement_W_S;
            @Movement_W_S.canceled -= instance.OnMovement_W_S;
            @Movement_A_D.started -= instance.OnMovement_A_D;
            @Movement_A_D.performed -= instance.OnMovement_A_D;
            @Movement_A_D.canceled -= instance.OnMovement_A_D;
        }

        public void RemoveCallbacks(IJogadorActions instance)
        {
            if (m_Wrapper.m_JogadorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJogadorActions instance)
        {
            foreach (var item in m_Wrapper.m_JogadorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JogadorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JogadorActions @Jogador => new JogadorActions(this);
    public interface IJogadorActions
    {
        void OnMovement_W_S(InputAction.CallbackContext context);
        void OnMovement_A_D(InputAction.CallbackContext context);
    }
}
